import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.util.*;

public class GenericTextToJsonConverter {
    public static void main(String[] args) throws Exception {
        String textFilePath = "data.txt";  // Path to your space-separated text file
        String excelFilePath = "mapping.xlsx";  // Path to your Excel mapping file
        List<ObjectNode> jsonList = new ArrayList<>();

        // Read the mapping from the Excel file
        List<Map<String, String>> mappings = readMappingFromExcel(excelFilePath);

        // Read the text file and convert to JSON
        try (BufferedReader br = new BufferedReader(new FileReader(textFilePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(" ");
                ObjectNode jsonMap = new ObjectMapper().createObjectNode();

                // Fill in the JSON structure based on mappings
                for (Map<String, String> mapping : mappings) {
                    String jsonPath = mapping.get("jsonPath");
                    int startPos = Integer.parseInt(mapping.get("startPosition"));
                    int length = Integer.parseInt(mapping.get("length"));
                    int maxOccurrence = Integer.parseInt(mapping.get("maxOccurrence"));

                    // Handle multiple occurrences for arrays
                    if (maxOccurrence > 1 && jsonPath.contains("[]")) {
                        ArrayNode arrayNode = jsonMap.withArray(jsonPath.replace("[]", ""));
                        for (int i = 0; i < maxOccurrence; i++) {
                            if (startPos + i * length < values.length) {
                                ObjectNode itemNode = new ObjectMapper().createObjectNode();
                                for (int j = 0; j < length; j++) {
                                    if (startPos + i * length + j < values.length) {
                                        itemNode.put("item" + j, values[startPos + i * length + j].trim());
                                    }
                                }
                                arrayNode.add(itemNode);
                            }
                        }
                    } else if (startPos < values.length) {
                        switch (mapping.get("dataType")) {
                            case "String":
                                jsonMap.put(jsonPath, values[startPos].trim());
                                break;
                            case "Integer":
                                jsonMap.put(jsonPath, Integer.parseInt(values[startPos].trim()));
                                break;
                            case "Double":
                                jsonMap.put(jsonPath, Double.parseDouble(values[startPos].trim()));
                                break;
                        }
                    }
                }
                jsonList.add(jsonMap);
            }
        }

        // Wrap in a "request" array and write to file
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode rootNode = mapper.createObjectNode();
        rootNode.set("request", mapper.valueToTree(jsonList));
        mapper.writeValue(new File("output.json"), rootNode);
    }

    private static List<Map<String, String>> readMappingFromExcel(String excelFilePath) throws IOException {
        List<Map<String, String>> mappings = new ArrayList<>();
        try (FileInputStream excelFile = new FileInputStream(new File(excelFilePath));
             Workbook workbook = new XSSFWorkbook(excelFile)) {

            Sheet sheet = workbook.getSheetAt(0);
            for (Row row : sheet) {
                if (row.getRowNum() == 0) continue; // Skip header row
                Map<String, String> map = new HashMap<>();
                map.put("fieldName", row.getCell(0).getStringCellValue());
                map.put("startPosition", String.valueOf((int) row.getCell(1).getNumericCellValue()));
                map.put("length", String.valueOf((int) row.getCell(2).getNumericCellValue()));
                map.put("maxOccurrence", String.valueOf((int) row.getCell(3).getNumericCellValue()));
                map.put("jsonPath", row.getCell(4).getStringCellValue());
                map.put("dataType", row.getCell(5).getStringCellValue());
                mappings.add(map);
            }
        }
        return mappings;
    }
}
