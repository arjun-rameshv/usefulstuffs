import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;

public class FixedWidthTextGenerator {

    public static void generateFixedWidthText(String jsonFilePath, String excelFilePath, String outputFilePath) throws IOException {
        // Read and parse the JSON file
        ObjectMapper mapper = new ObjectMapper();
        JsonNode jsonNode = mapper.readTree(new File(jsonFilePath));

        // Read the Excel file
        FileInputStream excelFile = new FileInputStream(new File(excelFilePath));
        Workbook workbook = new XSSFWorkbook(excelFile);
        Sheet sheet = workbook.getSheetAt(0); // Assuming the mapping is in the first sheet

        // Buffer to hold the final text
        StringBuilder finalText = new StringBuilder();

        // Iterate through each row in the Excel sheet
        Iterator<Row> rowIterator = sheet.iterator();
        while (rowIterator.hasNext()) {
            Row row = rowIterator.next();
            String fieldName = row.getCell(0).getStringCellValue(); // Field name, e.g., "person.name"
            int startPos = (int) row.getCell(1).getNumericCellValue() - 1; // Start position (adjusting to 0-based index)
            int length = (int) row.getCell(2).getNumericCellValue(); // Length of the field
            int occurrence = (int) row.getCell(3).getNumericCellValue(); // Occurrence

            if (fieldName.contains("[]")) {
                String arrayFieldName = fieldName.substring(0, fieldName.indexOf("[]"));

                JsonNode arrayNode = jsonNode.path(arrayFieldName);
                if (arrayNode.isArray()) {
                    for (int i = 0; i < Math.min(occurrence, arrayNode.size()); i++) {
                        JsonNode item = arrayNode.get(i);

                        // For array of objects (like "projects[].name")
                        if (item.isObject()) {
                            String childField = fieldName.substring(fieldName.indexOf("[]") + 3);
                            String value = getNestedValue(item, childField);
                            value = formatValue(value, length);
                            insertValueIntoBuffer(finalText, value, startPos);
                        }
                        // For array of simple values (like "skills[]")
                        else if (item.isValueNode()) {
                            String value = item.asText();
                            value = formatValue(value, length);
                            insertValueIntoBuffer(finalText, value, startPos);
                        }

                        // Move the start position forward for the next occurrence of the array field
                        startPos += length;
                    }
                }
            } else {
                // Handle regular (non-array) fields
                String value = getNestedValue(jsonNode, fieldName);
                value = formatValue(value, length);
                insertValueIntoBuffer(finalText, value, startPos);
            }
        }

        workbook.close();

        // Write to output file
        try (FileWriter writer = new FileWriter(outputFilePath)) {
            writer.write(finalText.toString());
        }

        System.out.println("Fixed-width text file generated successfully at: " + outputFilePath);
    }

    // Helper function to format the value based on length (padding or truncating)
    private static String formatValue(String value, int length) {
        if (value == null) value = "";  // Fallback if the field is missing in the JSON
        return String.format("%-" + length + "s", value).substring(0, length);
    }

    // Helper function to retrieve values from nested JSON using dot notation
    private static String getNestedValue(JsonNode node, String fieldName) {
        String[] fields = fieldName.split("\\.");
        JsonNode currentNode = node;

        for (String field : fields) {
            currentNode = currentNode.path(field);
            if (currentNode.isMissingNode()) {
                return null; // Return null if any part of the path is missing
            }
        }

        return currentNode.isValueNode() ? currentNode.asText() : null; // Return value as text if it's a value node
    }

    // Helper function to insert the value into the final buffer at a specified start position
    private static void insertValueIntoBuffer(StringBuilder finalText, String value, int startPos) {
        if (finalText.length() < startPos) {
            while (finalText.length() < startPos) {
                finalText.append(" ");
            }
        }
        finalText.insert(startPos, value);
    }

    public static void main(String[] args) {
        try {
            String jsonFilePath = "input.json";    // Path to your JSON file
            String excelFilePath = "mapping.xlsx"; // Path to your Excel mapping file
            String outputFilePath = "output.txt";  // Path to your output text file

            generateFixedWidthText(jsonFilePath, excelFilePath, outputFilePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
