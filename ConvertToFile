import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jayway.jsonpath.JsonPath;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class JsonToSpaceSeparatedFile {

    public static void main(String[] args) throws Exception {
        // Load mappings from Excel file
        List<FieldMapping> mappings = readExcelMappingFile("mapping.xlsx");

        // Example JSON file
        String jsonFilePath = "input.json";

        // Read and parse the JSON file (assumes the JSON contains a "response" list of objects)
        ObjectMapper mapper = new ObjectMapper();
        JsonNode rootNode = mapper.readTree(new File(jsonFilePath));
        JsonNode responseNodes = rootNode.path("response"); // Get the "response" field, which is an array

        // Output file
        FileWriter writer = new FileWriter("output.txt");

        // Iterate over each object in the "response" list (each object represents a row)
        for (JsonNode jsonNode : responseNodes) {
            String row = formatRow(jsonNode, mappings);
            writer.write(row + System.lineSeparator());
        }

        writer.close();
        System.out.println("File generated: output.txt");
    }

    // Format a single row based on the mappings and JSON data
    private static String formatRow(JsonNode jsonNode, List<FieldMapping> mappings) {
        StringBuilder rowBuilder = new StringBuilder();

        // Create a temporary list to hold the skill names and levels
        List<String> skillNames = new ArrayList<>();
        List<String> skillLevels = new ArrayList<>();

        for (FieldMapping mapping : mappings) {
            Object value = JsonPath.read(jsonNode.toString(), mapping.getJsonPath());

            // Handle arrays and occurrences
            if (value instanceof List) {
                List<?> values = (List<?>) value;

                // Check for skills specifically
                if (mapping.getJsonPath().contains("skills")) {
                    for (Object skill : values) {
                        String skillName = JsonPath.read(skill.toString(), "$.name");
                        String skillLevel = JsonPath.read(skill.toString(), "$.level");
                        skillNames.add(skillName);
                        skillLevels.add(skillLevel);
                    }
                } else {
                    // Handle general list values (like hobbies)
                    for (int i = 0; i < mapping.getOccurrence(); i++) {
                        if (i < values.size()) {
                            rowBuilder.append(padOrTrim(values.get(i).toString(), mapping.getLength())).append(" ");
                        } else {
                            rowBuilder.append(padOrTrim("", mapping.getLength())).append(" ");
                        }
                    }
                }
            } else {
                // For non-array values, repeat the same value if multiple occurrences are specified
                for (int i = 0; i < mapping.getOccurrence(); i++) {
                    rowBuilder.append(padOrTrim(value.toString(), mapping.getLength())).append(" ");
                }
            }
        }

        // Now add the skills to the row
        for (int i = 0; i < 3; i++) { // Assuming a maximum of 3 skills
            if (i < skillNames.size()) {
                rowBuilder.append(padOrTrim(skillNames.get(i), 30)).append(" ");
                rowBuilder.append(padOrTrim(skillLevels.size() > i ? skillLevels.get(i) : "", 15)).append(" ");
            } else {
                rowBuilder.append(padOrTrim("", 30)).append(" "); // pad if less than 3
                rowBuilder.append(padOrTrim("", 15)).append(" "); // pad if less than 3
            }
        }

        return rowBuilder.toString().trim();
    }

    // Pad or trim values to fit the required length
    private static String padOrTrim(String value, int length) {
        if (value.length() > length) {
            return value.substring(0, length); // Trim if longer
        } else {
            return String.format("%-" + length + "s", value); // Pad with spaces
        }
    }

    // Read the Excel mapping file
    private static List<FieldMapping> readExcelMappingFile(String excelFilePath) throws Exception {
        List<FieldMapping> mappings = new ArrayList<>();

        FileInputStream fis = new FileInputStream(new File(excelFilePath));
        Workbook workbook = new XSSFWorkbook(fis);
        Sheet sheet = workbook.getSheetAt(0);

        Iterator<Row> rowIterator = sheet.iterator();
        rowIterator.next(); // Skip the header row

        while (rowIterator.hasNext()) {
            Row row = rowIterator.next();

            String fieldName = row.getCell(0).getStringCellValue();
            int startPosition = (int) row.getCell(1).getNumericCellValue();
            int length = (int) row.getCell(2).getNumericCellValue();
            int occurrence = (int) row.getCell(3).getNumericCellValue();
            String jsonPath = row.getCell(4).getStringCellValue();

            FieldMapping mapping = new FieldMapping(fieldName, startPosition, length, occurrence, jsonPath);
            mappings.add(mapping);
        }

        workbook.close();
        fis.close();

        return mappings;
    }
}
